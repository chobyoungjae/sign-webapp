[전자서명 웹앱 요구사항 및 구조 정리]

1. 전체 흐름
- 구글 스프레드시트에서 설문 응답이 들어오면 트리거가 작동
- 팀장보드에 '서명하기' URL이 들어감 (예: https://sign-webapp.vercel.app/sign/leader?name=팀장명&role=leader)
- 팀장이 URL을 클릭하면 400x400 팝업이 뜨고, 320x240 캔버스와 버튼, 안내문구가 있는 전자서명 UI가 나옴
- 서명 후 '서명완료' → '서명 중...' → 저장 성공 시 '창 닫기'로 버튼/문구 변경
- 창 닫기 시 팝업과 부모 창 모두 닫힘(또는 새로고침)
- 서명 이미지는 구글 드라이브의 지정 폴더에 '팀장명.png' 등으로 저장(덮어쓰기)
- 이후 검토자, 대표자도 동일한 방식으로 서명, 파일명만 다르게 저장
- 구글 드라이브에 저장된 이미지는 메인보드에 반영됨

2. 기술적 세부 요구
- 프론트엔드(Next.js, Vercel 배포)
  * 400x400 팝업, 320x240 캔버스, 버튼, 안내문구 UI
  * URL 파라미터(name, role 등)로 이름/역할 받아서 표시 및 저장 파일명에 활용
  * 서명 완료 시 버튼/문구 상태 변화, 창 닫기 신호
  * 서명 이미지를 base64 PNG로 추출해 API로 전송
- 백엔드(API, Next.js API Route)
  * 구글 드라이브 API 연동(서비스 계정, 폴더 ID 필요)
  * 파일명(팀장명 등)으로 저장, 이미 존재하면 덮어쓰기
  * base64 이미지를 PNG로 변환 후 업로드
  * API 보안(허용 도메인, 인증 등) 고려

3. 구현 순서
1) 프론트엔드: 팝업/캔버스/버튼/문구 UI 구현, 서명 이미지 추출 및 API 전송, 버튼/문구 상태 변화, 창 닫기
2) 백엔드: 구글 드라이브 API 연동(서비스 계정, 폴더 ID, 파일명), 파일 덮어쓰기 로직, base64→PNG 변환 및 업로드
3) 통합: URL 파라미터로 이름/역할 처리, Vercel 배포, 구글 스프레드시트 연동 테스트

4. 까다로운 부분
- 구글 드라이브 API 인증(서비스 계정, 키 관리)
- 파일명 중복 시 덮어쓰기(기존 파일 검색/삭제)
- API 보안(외부 접근 제한)
- 팝업/부모창 닫기 신호 처리

5. 다음 단계
- 1차: 프론트엔드(팝업/캔버스/버튼/상태변화/이미지 추출/전송) 완성
- 2차: 백엔드(API→구글 드라이브 저장/덮어쓰기) 완성
- 3차: 통합 및 배포, 구글 스프레드시트 연동까지 마무리 